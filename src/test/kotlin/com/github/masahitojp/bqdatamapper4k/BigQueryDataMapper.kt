/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.masahitojp.bqdatamapper4k

import com.google.api.services.bigquery.model.TableRow
import com.google.gson.JsonSyntaxException
import org.junit.Assert.assertThrows
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

class AppTest {
    @Test
    fun testFoo() {
        val row: TableRow = TableRow().set("aaa", 2)
        val results: Foo = row.toDataClass<Foo>()
        assertEquals(results, Foo(2))
    }

    @Test
    fun testBar() {
        val row = TableRow().set("a", 2)
        val results = row.toDataClass<Bar>()
        assertEquals(results, Bar(2, null, null))
    }

    @Test
    fun testPutting_Null_Value_Into_NonNullType() {
        val row = TableRow().set("a", null)
        val results = row.toDataClass<Piyo>()
        assertEquals(results, Piyo(0))
    }

    @Test
    fun testDataclassWithDefaultValue() {
        val row = TableRow().set("a", 2)
        val results = row.toDataClass<Baz>()
        // we should check null
        assertEquals(results, Baz(2, null, null))
    }

    @Test
    fun testDataclassWithListParams() {
        val row = TableRow()
            .set("a", 2)
            .set("b", listOf(1, 2))
        val results = row.toDataClass<Hoge>()
        assertEquals(results, Hoge(2, listOf<Int>(1, 2)))

        assertEquals(
            results.serializeToMap(),
            mapOf("a" to 2.0, "b" to listOf(1.0, 2.0))
        )
    }

    @Test
    fun testJsonToBigQueryTableRow() {
        val row = TableRow()
            .set("a", 2.0)
        val results =
            """
            { "a" : 2 }
        """.trimIndent()
                .toTableRow()
        assertEquals(results, row)
    }

    @Test
    fun testJsonToBigQueryTableRowForTimestamp() {
        val dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd/ HH:mm:ss")
        val now = LocalDateTime.now()
        val row = TableRow()
            .set("timestamp", dateTimeFormatter.format(now))
        val results =
            """
            { "timestamp" : "" }
        """.trimIndent()
                .toTableRow(now)
        assertEquals(results, row)
    }

    @Test
    fun testJsonToBigQueryTableRowForStringList() {
        val row = TableRow()
            .set("a", arrayListOf("佐藤", "鈴木", "井上"))
        val results =
            """
            { "a" : ["佐藤", "鈴木", "井上"] }
        """.trimIndent()
                .toTableRow()
        assertEquals(results, row)
    }
    @Test
    fun testJsonToBigQueryTableRowForException() {
        assertThrows(JsonSyntaxException::class.java) {
            "test".toTableRow()
        }
    }
    @Test
    fun testAAAA () {
        val row: TableRow = TableRow().set("a", listOf("佐藤", "鈴木", "井上"))
        val results: ListStringTest = row.toDataClass<ListStringTest>()
        assertEquals(results, ListStringTest(listOf("佐藤", "鈴木", "井上")))
    }
}
